services:
  # HTTP Proxy - Stateless gateway for n8n (Port 8080)
  amazon-ads-mcp-proxy:
    # Build proxy from local files
    build:
      context: .
      dockerfile: Dockerfile.proxy

    container_name: amazon-ads-mcp-proxy
    environment:
      # MCP Server URL (internal Docker network)
      - MCP_SERVER_URL=http://amazon-ads-mcp-netzsicht:9080/mcp
      - PROXY_HOST=0.0.0.0
      - PROXY_PORT=8080
      - LOG_LEVEL=INFO

    # Expose proxy port publicly
    ports:
      - "8080:8080"

    # Wait for MCP server to start
    depends_on:
      - amazon-ads-mcp

    restart: unless-stopped

  # MCP Server - Internal only, accessed via proxy
  amazon-ads-mcp:
    image: ghcr.io/netzsicht/amazon_ads_mcp:latest
    container_name: amazon-ads-mcp-netzsicht
    env_file:
      - .env
    environment:
      # Server runtime
      - TRANSPORT=http
      - HOST=0.0.0.0
      - PORT=9080
      - LOG_LEVEL=INFO
      - AMAZON_AD_PACKAGES=profiles,accounts-ads-accounts
      - AMAZON_ADS_TOKEN_PERSIST=true
      - AMAZON_ADS_CACHE_DIR=/app/.cache/amazon-ads-mcp
      # Authentication (from .env file)
      - AMAZON_AD_API_CLIENT_ID=${AMAZON_AD_API_CLIENT_ID}
      - AMAZON_AD_API_CLIENT_SECRET=${AMAZON_AD_API_CLIENT_SECRET}
      - AMAZON_AD_API_REFRESH_TOKEN=${AMAZON_AD_API_REFRESH_TOKEN}
      - AMAZON_AD_API_PACKAGES=profiles,reporting-version-3

    # Port 9080 NOT exposed externally - only accessible within Docker network
    expose:
      - "9080"

    volumes:
      # Persist downloaded exports/reports
      - downloads:/app/data
      # Persist token cache across container restarts
      - cache:/app/.cache

    command:
      - "python"
      - "-m"
      - "amazon_ads_mcp.server.mcp_server"
      - "--transport"
      - "http"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "9080"

    restart: unless-stopped

volumes:
  downloads: {}
  cache: {}
